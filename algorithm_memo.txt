[Dynamic Programming - 동적 계획법] "기억하며 풀기"
동적 계획법은? <출처: https://hongjw1938.tistory.com/47>
- 프로그래밍은 컴퓨터 프로그래밍이 아닌 테이블을 작성한다는 뜻
- 일반적인 재귀와 유사하나, 큰 차이점은 "일반적인 재귀는 단순 사용 시 동일한 작은 문제들이 여러 번 반복되어 비효율적인 계산이 될 수 있음"
    ex) 피보나치 수를 계산: f(n) = f(n-1) + f(n-2) 
    각 함수를 1번씩 호출하면 동일한 값을 2번씩 구하게 되고 이로 인해 100번째 피보나치 수를 구하기 위해 호출되는 함수의 횟수는 기하급수 적으로 증가 -> 
    왜냐하면, f(n-1)에서 한 번 구한 값을 f(n-2)에서 또 다시 같은 값을 구하는 과정을 반복하게 되기 때문
-DP가 적용되기 위해서는 2가지 조건을 만족해야 한다.
    1) Overlapping Subproblems(겹치는 부분 문제)
    DP는 기본적으로 문제를 나누고 그 문제의 결과 값을 재활용해서 전체 답을 구한다. 그래서 동일한 작은 문제들이 반복하여 나타나는 경우에 사용이 가능하다.
    즉, DP는 부분 문제의 결과를 저장하여 재 계산하지 않을 수 있어야 하는데, 해당 부분 문제가 반복적으로 나타나지 않는다면 재사용이 불가능하니 부분 문제가 중복되지 않는 경우에는 사용X
    2) Optimal Substructure(최적 부분 구조)
    부분 문제의 최적 결과 값을 사용해 전체 문제의 최적 결과를 낼 수 있는 경우를 의미한다. 그래서 특정 문제의 정답은 문제의 크기에 상관없이 항상 동일하다!
    - DP 사용 과정
    1) DP로 풀 수 있는 문제인지 확인한다.
    2) 문제의 변수 파악
    DP는 현재 변수에 따라 그 결과 값을 찾고 그것을 전달하여 재사용하는 것을 거친다.  즉, 문제 내 변수의 개수를 알아내야 한다는 것. 이것을 영어로 "state"를 결정한다고 한다.
    3) 변수 간 관계식 만들기(점화식)
    변수들에 의해 결과 값이 달라지지만 동일한 변수값인 경우 결과는 동일하다. 또한 우리는 그 결과값을 그대로 이용할 것이므로 그 관계식을 만들어낼 수 있어야 한다.
    4) 메모하기(memoization or tabulation)
    변수 간 관계식까지 정상적으로 생성되었다면 변수의 값에 따른 결과를 저장해야 한다. 이것을 메모한다고 하여 Memoization
    5) 기저 상태 파악하기
    가장 작은 문제의 상태를 알아야 한다.
    6) 구현하기
        (1) Bottom-Up (Tabulation 방식) - 반복문 사용
        (2) Top-Down (Memoization 방식) - 재귀 사용

- Q. Divide and Conquer(분할 정복)와 차이점은?
분할 정복과 동적 프로그래밍은 주어진 문제를 작게 쪼개서 하위 문제로 해결하고 연계적으로 큰 문제를 해결한다는 점은 같다.
차이점은, 분할 정복은 분할된 하위 문제가 동일하게 중복이 일어나지 않는 경우에 쓰며, 동일한 중복이 일어나면 동적 프로그래밍을 쓴다는 것이다.
